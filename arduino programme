#include <PWM.h>

#include <avdweb_AnalogReadFast.h>

#include <PID_v1.h>

#define PIN_INPUT 0  //This is the voltage feedback pin
#define PIN_INPUT2 1    //This is the current feedback pin
#define PIN_OUTPUT 3    //This is the duty cycle output
#define LED 13        //an LED indicating large load disturbance

volatile int32_t i = 0;    //record how many times interrupt functions has been called

//Define Variables we'll be connecting to
double Setpoint, Input, Output; // input is the output voltage divided by 47k + 100k voltage divider
double Setpoint2, Input2;// input2 is the measured current. It will be divided by 4.7 after measured

//Exponential Filter
double alpha = 0.3;
double average = 0;

//Specify the links and initial tuning parameters
double Kp=0.2422, Ki=24.1417, Kd=0.0000079668;
double Kp2=0.0032,Ki2=321.255,Kd2=0;
PID myPID(&Input, &Setpoint2, &Setpoint, Kp, Ki, Kd, DIRECT);//for outer loop 
PID myPID2(&Input2, &Output, &Setpoint2, Kp2, Ki2, Kd2, DIRECT);//for inner loop
# define SamplingPeriod1 2000  //sampling period of outer loop in micro second, equals to 10e6/5kHz*10
# define SamplingPeriod2 200  //sampling period of inner loop in micro second, equals to 10e6/5kHz

volatile double feedback = 0,feedback2 = 0;          //Store the feedback value

//For PWM library
int32_t frequency=100000;//PWM frequency

void setup(void)
{
  pinMode(PIN_INPUT, INPUT);
  pinMode(PIN_INPUT2, INPUT);
  pinMode(PIN_OUTPUT, OUTPUT);
  pinMode(LED,OUTPUT);
  Serial.begin(9600);

  //PID part: initialize the variables we're linked to
  Input = analogRead(PIN_INPUT);
  Setpoint = 300;  //This is the voltage divided by 47k//100k voltage divider. ratio is about 3. Setpoint 300 Corresponding to 1.46*3 = 4.4V

  //turn the PID on
  myPID.SetMode(AUTOMATIC);
  myPID2.SetMode(AUTOMATIC);

  //minimize the Sampling time (1 micro second) 
  myPID.SetSampleTime(SamplingPeriod1);
  myPID2.SetSampleTime(SamplingPeriod2);

  //Set output limits for anti-windup purpose
  myPID.SetOutputLimits(0, 200);
  myPID2.SetOutputLimits(0, 200);

  
  //initialize the PWM pin and set the frequency.
  InitTimersSafe();
  bool success = SetPinFrequencySafe(PIN_OUTPUT,frequency); // set frequency

  //Set up timer1 and interrupt function
  Timer1Setup();
}


ISR(TIMER1_COMPA_vect){  //change the 0 to 1 for timer1 and 2 for timer2
   //  Voltage loop PID part: 
  if(i%10 == 0){//outer loop works 10 times slower than the inner loop
  Input = analogReadFast(PIN_INPUT);
  //average = average*alpha+Input*(1-alpha);
  myPID.Compute();
  }
  else{
  Input2 = analogReadFast(PIN_INPUT2)/4.7;       //use 4.7 ohm shunt resistor to get current
  //average = average*alpha+Input*(1-alpha);
  myPID2.Compute();
  pwmWrite(PIN_OUTPUT, Output);
  }
  i++;
}

void loop(void)//to make sure PID actually run 5k times per second.
{
  int32_t icopy = 0;
  noInterrupts();
  Serial.print(Output);//For debug purpose
  double resistor = Input*3/Input2;// consider the effecto of voltage divider. 
  if (resistor >= 12||resistor <= 8){
    digitalWrite(LED, HIGH);
  }
  else
  {digitalWrite(LED,LOW);}
  Serial.print(" ");
  Serial.print(resistor);
  Serial.print(" ");
  icopy = i;
  Serial.println(icopy);
  interrupts();
  PIDparameterUpdate(resistor);
  delay(10000);
}


void Timer1Setup(){
    cli();//stop interrupts

  //set timer1 interrupt at 5kHz
  TCCR1A = 0;// set entire TCCR1A register to 0
  TCCR1B = 0;// same for TCCR1B
  TCNT1  = 0;//initialize counter value to 0
  // set compare match register for 5000hz increments
  OCR1A = 59;// = (16*10^6) / (5000*64) - 1 (must be <256)
  // turn on CTC mode
  TCCR1B |= (1 << WGM12);
  // Set CS11 and CS12 bits for 64 prescaler
  TCCR1B |= (1 << CS11) | (1 << CS10);  
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A);
  sei();//allow interrupts

}

void PIDparameterUpdate(double resistor){
  double capacitor = 3.3*0.000001;
  double inductor = 100*0.000001;
  double Vin = 12.5*1024/5;         // In arduino 0-5V indicates 0-1024. We multiple the coefficient now 
  double Vout = Setpoint*3;           //so the PID parameters won't be need to multiple this number again.
  double timeConst1 = 0.01;
  
  //transfer function for Buck converter inductor current 
  double omega_n = sqrt(1/(inductor*capacitor));
  double xi = 1/(resistor*capacitor)/(2*omega_n);
  double K = Vin/(resistor*inductor*capacitor);

  Kp = 1/timeConst1/K*2*xi*omega_n;
  Ki = 1/timeConst1/K*(omega_n*omega_n);
  Kd = 1/timeConst1/K;

  //IMC outer loop design
  double timeConst2 = 6.436*timeConst1;
  Kp2 = (timeConst1+resistor*capacitor)/(timeConst2*timeConst2)/resistor;
  Ki2 = 1/(timeConst2*timeConst2)/resistor;
  Kd2 = timeConst1*resistor*capacitor/(timeConst2*timeConst2)/resistor;

//  cli();//stop interrupts
//  myPID.SetTunings(Kp, Ki, Kd);
//  myPID.SetTunings(Kp2,Ki2,Kd2);
//  sei();//allow interrupts

  Serial.print("parameters updated. The detected load is ");Serial.println(resistor);
  Serial.println("For inner loop");
  Serial.print(" Kp:");Serial.println(Kp,6);//This "6" indicates the precision of the float display
  Serial.print(" Ki:");Serial.println(Ki,6);
  Serial.print(" Kd:");Serial.println(Kd,6);
  Serial.println("For outer loop");
  Serial.print(" Kp:");Serial.println(Kp2,6);
  Serial.print(" Ki:");Serial.println(Ki2,6);
  Serial.print(" Kd:");Serial.println(Kd2,6);
  Serial.println(" ");
}
